import groovy.json.JsonOutput

def COLOR_MAP = [
    'SUCCESS': 'good',
    'ALERT': 'warning',
    'FAILURE': 'danger'
]

def getBuildUser(){
    def userCause = currentBuild.rawBuild.getCause(Cause.UserIdCause)
    return userCause ? userCause.getUserId() : "Automated/Unknown"
}

pipeline {
    agent any
    
    environment {
        BUILD_USER = ''
        currentStage = '' // Variable to track current stage
    }

    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'default_branch_name', name: 'BRANCH', type: 'PT_BRANCH'
    }

    stages {
        
        stage('Initialise') {
            steps {
                script{
                  BUILD_USER = getBuildUser()
                  currentStage = 'Initialise'
                }
                slackSend channel: 'channel_name',
                        color: 'warning',
                      message: "${JOB_NAME} Build Initiated by ${BUILD_USER}"
            }
        }
        
        stage('clone') {
            steps {
                script {
                    currentStage = 'Clone'
                }
                git branch: "${params.BRANCH}", credentialsId: 'credential_id', url: 'repository_ssh_url'
            }
        }

        stage ('Build') {
            steps{
                script{
                  currentStage = 'Build'
                }
                // input(message: 'Create Build?', ok: 'Build')
                sh 'npm i --legacy-peer-deps'
                sh 'npm run build:dev'
            }
        }

        stage('Deploy') {
            steps {
                script {
                    currentStage = 'Deploy'
                }
                sh 'aws s3 cp /var/lib/jenkins/workspace/$JOB_NAME/build/ s3://bucket_name/ --recursive'
            }
        }
    }

    post {
        success {
            script {
                BUILD_USER = getBuildUser()
            }
            slackSend channel: 'channel_name',
                      color: COLOR_MAP['SUCCESS'],
                      message: "SUCCESS: Build ${JOB_NAME} ${env.BUILD_NUMBER} succeeded by ${BUILD_USER}"
        }
        failure {
            script {
                BUILD_USER = getBuildUser()
            }
            slackSend channel: 'channel_name',
                      color: COLOR_MAP['FAILURE'],
                      message: "FAILURE: Build ${JOB_NAME} ${env.BUILD_NUMBER} failed in *${currentStage}* stage by ${BUILD_USER}"
        }
        // always {
        //     script {
        //         BUILD_USER = getBuildUser()
        //     }
        //     slackSend channel: 'channel_name',
        //              color: COLOR_MAP[currentBuild.currentResult],
        //              message: "*${currentBuild.currentResult}:* Project Name Build ${env.BUILD_NUMBER} by ${BUILD_USER}"
        // }
    }
}
